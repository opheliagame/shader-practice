-- easings.net 
-- robert penner's easing Functions

t << etime * 0.1; res << 20;
frxy x y res = [(x * res/2) - floor (x*res/2 + 0.5), (y * res/2) - floor (y*res/2 + 0.5)];


mx << osc (seq [2, 3]) * sin fy * cos (fx * seq [5, 2]);
my << cos (fx * 3) * cos (ft * slow ((fract $ (fx+t) /100 ) * 12) (seq[fy, fx, fr])*2 + t);

p1 << abs $ setfxy [fx*res, fy*res] $ floor mx * floor my; 

move my $
-- [osc 0.2, 0.3 + fract t, 0.4] >> add;
-- [1, sin $ floor $ fx * 34+t, floor $ fy * sin fx + t] * 
p1 * 0.5 >> add;

c << circle 0 1;
-- fit 1 $ setfxy [fx, fy] $ tile [p1*sin fx] $ c * 0.1 * p1 >> add;

----- 
t << time * 0.1; res << 10;
frxy x y res = [(x * res/2) - floor (x*res/2 + 0.5), (y * res/2) - floor (y*res/2 + 0.5)];


mx << osc (seq [2, 3]) * sin fy * cos (fx * seq [5, 2]);
my << cos (fx * 3) * cos (ft * slow ((fract $ (fx+t) /100 ) * 12) (seq[fy, fx, fr])*2 + t);

p1 << abs $ setfxy [fx*res, fy*res] $ floor mx * floor my; 

move my $
-- [osc 0.2, 0.3 + fract t, 0.4] >> add;
[1, sin $ floor $ fx * 34+t, floor $ fy * sin fx + t] * 
p1 * 0.5 >> add;

c << circle 0 1;
 fit 1 $ setfxy [fx, fy] $ tile [p1*sin fx] $ c * 0.9 * p1 >> add;

---- 

t << time * 0.1; res << (seq [slow 2, fast 2](seq [sin 4, cos 10, sin 2] * 10);
frxy x y res = [(x * res/2) - floor (x*res/2 + 0.5), (y * res/2) - floor (y*res/2 + 0.5)];
mx << osc (seq [4, 12]) * sin fy * cos (fx * seq [cos fx, cos fy]);
my << cos (fx * 3) * cos ( slow (( (fx) /100 ) * 12) (seq[fy, fx])*2);

p1 << abs $ setfxy [fx*res, fy*res] $ floor mx * floor my; 

-- move my $
-- [osc 0.2, 0.3 + fract t, 0.4] >> add;
-- [1, sin $ floor $ fx * 34+t, floor $ fy * sin fx + t] * 
p1 * 0.5 >> add;
